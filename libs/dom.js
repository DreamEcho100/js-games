import{roundToPrecision as r}from"./math.js";async function f(n){return new Promise(l=>{const o=new Image;o.onload=function(t){const e=t.target;if("naturalHeight"in e&&"naturalWidth"in e&&(e.naturalHeight+e.naturalWidth===0||e.width+e.height===0)){l([new Error("Image has no dimensions"),null]);return}l([null,o])},o.onerror=function(t){const e=t instanceof Error?t.message:typeof t=="string"?t:`Error loading as image: ${n}`;l([new Error(`Failed to load image at ${n}: ${e}`),null])},o.src=n})}async function p(n){return new Promise(l=>{const o=new Audio;o.preload="auto",o.onloadeddata=function(t){l([null,o])},o.onerror=function(t){const e=t instanceof Error?t.message:typeof t=="string"?t:`Error loading as audio: ${n}`;l([new Error(`Failed to load image at ${n}: ${e}`),null])},o.src=n})}async function b(n){const l=await Promise.all(n.map(async t=>{if(t.type==="image"){const[e,i]=await f(t.src);return e?[new Error(`Failed to preload ${t.src}: ${e.message}`),null]:[null,i]}else if(t.type==="audio"){const[e,i]=await p(t.src);return e?[new Error(`Failed to preload ${t.src}: ${e.message}`),null]:[null,i]}return[new Error("Unknown asset type"),null]})),o=new Array(l.length);for(let t=0;t<l.length;t++){const[e,i]=l[t];if(e)return[e,null];o[t]=i}return[null,o]}function w(n,l){const o=document.createElement("link");return o.rel="stylesheet",o.type="text/css",o.href=n,document.head.appendChild(o),l?.register(()=>{o.remove()}),o}function x({canvas:n,ctx:l,onUpdateCanvasSize:o,debounce:t=100}){const e=n.getBoundingClientRect(),i={defaultWidth:n.width,defaultHeight:n.height,width:r(e.width,2),height:r(e.height,2),top:r(e.top,2),left:r(e.left,2),right:r(e.right,2),bottom:r(e.bottom,2),x:r(e.x,2),y:r(e.y,2)};n.width=i.defaultWidth,n.height=i.defaultHeight;const c=()=>{const u=n.getBoundingClientRect();i.width=r(u.width,2),i.height=r(u.height,2),i.top=r(u.top,2),i.left=r(u.left,2),i.right=r(u.right,2),i.bottom=r(u.bottom,2),i.x=r(u.x,2),i.y=r(u.y,2),o(i)};c(),n.style.aspectRatio=`${r(i.width/i.height,2)}`;const s=[];let a;s.push(()=>{a&&(clearTimeout(a),a=void 0)});const d=()=>{a&&clearTimeout(a),a=setTimeout(c,t)},g=new ResizeObserver(d);s.push(()=>g.disconnect()),n.addEventListener("resize",d),s.push(()=>{n.removeEventListener("resize",d)});const h=n.computedStyleMap().get("box-sizing")?.value??getComputedStyle(n).boxSizing??n.style.boxSizing;g.observe(n,{box:h});const m=document.body.computedStyleMap().get("box-sizing")?.value??getComputedStyle(document.body).boxSizing??document.body.style.boxSizing;return g.observe(document.body,{box:m}),()=>{for(const u of s)u()}}export{x as adjustCanvas,w as injectStylesheetLink,b as loadManyAssets,p as loadOneAudioElement,f as loadOneImageElement};
