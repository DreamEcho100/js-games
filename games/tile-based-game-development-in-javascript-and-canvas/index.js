import M from"../../libs/core/dom.js";import{adjustCanvas as k}from"../../libs/dom/index.js";import"../../libs/class-names.js";import"../../libs/cleanup.js";import"../../libs/math.js";class F{constructor(e){this.tileFrom=[1,1],this.tileTo=[1,1],this.position=[45,45],this.dimensions=[30,30],this.timeMoved=0,this.delayMove=300,this.directionKeyMap={up:"ArrowUp",right:"ArrowRight",down:"ArrowDown",left:"ArrowLeft"},this.KeysCollection=Object.values(this.directionKeyMap),this.keyDirectionMap=Object.fromEntries(Object.entries(this.directionKeyMap).map(t=>[t[1],[t[0],!1]])),e.registerEvents({keydownCb:t=>{t.key in this.keyDirectionMap&&(this.keyDirectionMap[t.key][1]=!0)},keyupCb:t=>{t.key in this.keyDirectionMap&&(this.keyDirectionMap[t.key][1]=!1)}})}placeAt(e,t,i){this.tileFrom=[t,i],this.tileTo=[t,i],this.position=[t*e.w+(e.w-this.dimensions[0])*.5,i*e.h+(e.h-this.dimensions[1])*.5]}processMovement(e,t){if(this.tileFrom[0]===this.tileTo[0]&&this.tileFrom[1]===this.tileTo[1])return!1;const i=t-this.timeMoved;if(i>=this.delayMove)this.placeAt(e,this.tileTo[0],this.tileTo[1]);else{const o=i/this.delayMove;if(this.tileTo[0]!==this.tileFrom[0]){const s=(this.tileTo[0]-this.tileFrom[0])*o;this.position[0]=(this.tileFrom[0]+s)*e.w+(e.w-this.dimensions[0])*.5}if(this.tileTo[1]!==this.tileFrom[1]){const s=(this.tileTo[1]-this.tileFrom[1])*o;this.position[1]=(this.tileFrom[1]+s)*e.h+(e.h-this.dimensions[1])*.5}}return!0}toMapIndex(e,t,i){return i*e.w+t}update(e,t,i,o){if(!this.processMovement(e,o))for(const s of this.KeysCollection){const[m,c]=this.keyDirectionMap[s];if(!c)continue;let n=!1;switch(m){case"up":this.tileFrom[1]>0&&i[this.toMapIndex(t,this.tileFrom[0],this.tileFrom[1]-1)]==1&&(this.tileTo[1]-=1,n=!0);break;case"down":this.tileFrom[1]<t.h-1&&i[this.toMapIndex(t,this.tileFrom[0],this.tileFrom[1]+1)]==1&&(this.tileTo[1]+=1,n=!0);break;case"left":this.tileFrom[0]>0&&i[this.toMapIndex(t,this.tileFrom[0]-1,this.tileFrom[1])]==1&&(this.tileTo[0]-=1,n=!0);break;case"right":this.tileFrom[0]<t.w-1&&i[this.toMapIndex(t,this.tileFrom[0]+1,this.tileFrom[1])]==1&&(this.tileTo[0]+=1,n=!0);break}if(n){this.timeMoved=o;break}}}draw(e,t=[0,0]){e.fillStyle="#0000ff",e.fillRect(t[0]+this.position[0],t[1]+this.position[1],this.dimensions[0],this.dimensions[1])}}class b{constructor(e){this.screen=e.screen,this.startTile=[0,0],this.endTile=[0,0],this.offset=[0,0]}update(e,t,i,o){this.offset[0]=Math.floor(this.screen[0]/2-i),this.offset[1]=Math.floor(this.screen[1]/2-o);const r=[Math.floor(i/e.w),Math.floor(o/e.h)];this.startTile[0]=r[0]-1-Math.ceil(this.screen[0]/2/e.w),this.startTile[1]=r[1]-1-Math.ceil(this.screen[1]/2/e.h),this.startTile[0]<0&&(this.startTile[0]=0),this.startTile[1]<0&&(this.startTile[1]=0),this.endTile[0]=r[0]+1+Math.ceil(this.screen[0]/2/e.w),this.endTile[1]=r[1]+1+Math.ceil(this.screen[1]/2/e.h),this.endTile[0]>=t.w&&(this.endTile[0]=t.w),this.endTile[1]>=t.h&&(this.endTile[1]=t.h)}draw(e,t,i,o){for(let r=this.startTile[1];r<=this.endTile[1];r++)for(let s=this.startTile[0];s<=this.endTile[0];s++){switch(o[r*i.w+s]){case 0:e.fillStyle="#999999";break;default:e.fillStyle="#eeeeee";break}e.fillRect(this.offset[0]+s*t.w,this.offset[1]+r*t.h,t.w,t.h)}}}const I=await M({cb:async({appId:f,cleanupManager:e,createLayout:t})=>{const i=`${f}-canvas`,o={render:{width:400,height:400},dom:{}};await t(`<small class='block text-center'><em>In Progress</em></small><canvas
				id="${i}"
				width="${o.render.width}"
				height="${o.render.height}"
				class="border border-solid border-gray-300 dark:border-gray-700 mx-auto max-w-full w-5xl"
			></canvas>`);const r=document.getElementById(i);if(!r)throw new Error("Couldn't find the canvas!");const s=r.getContext("2d");if(!s)throw new Error("Couldn't get the canvas context!");const m=k({canvas:r,ctx:s,onUpdateCanvasSize:a=>{o.dom=a}});e.register(m);let c=0,n=0,y=0;const d={w:40,h:40},w={w:20,h:20},h=new F({registerEvents:a=>{e.registerWindowEventListener({type:"keyup",listener:a.keyupCb}),e.registerWindowEventListener({type:"keydown",listener:a.keydownCb})},tile:d}),u=[0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,4,4,1,1,1,1,1,1,1,1,1,1,1,1,0,2,2,0,0,2,3,4,4,1,1,1,1,1,1,1,1,1,1,1,0,2,2,0,0,2,3,1,4,4,1,1,2,2,2,2,1,1,2,2,2,2,2,0,0,2,3,1,1,4,4,1,2,3,3,2,1,1,2,1,0,0,0,0,0,2,2,2,2,2,2,2,2,3,3,2,2,2,2,1,1,1,1,0,0,1,1,1,1,2,4,1,1,1,1,1,1,1,2,1,1,1,1,0,0,1,1,1,1,2,4,1,1,1,1,1,1,1,2,1,1,1,1,0,0,1,1,1,1,2,4,4,4,4,4,1,1,1,2,2,2,2,1,0,0,1,1,1,1,2,3,2,1,1,4,1,1,1,1,3,3,2,1,0,0,1,2,2,2,2,1,2,1,1,4,1,1,1,1,1,3,2,1,0,0,1,2,3,3,2,1,2,1,1,4,4,4,4,4,4,4,2,4,4,0,1,2,3,3,2,1,2,1,1,1,1,1,1,1,1,1,2,1,0,0,1,2,3,4,2,2,2,1,1,1,1,1,1,1,0,1,2,1,0,0,3,2,3,4,4,1,2,2,2,2,2,2,2,1,0,1,2,1,0,0,3,2,3,4,4,3,2,1,1,1,1,1,2,1,1,1,2,3,0,0,3,2,3,4,1,3,2,1,3,1,1,1,2,1,1,1,2,3,0,0,1,2,2,2,2,2,2,3,3,3,1,1,2,2,2,2,2,3,0,0,1,1,1,1,1,1,3,3,3,3,3,1,1,1,1,1,1,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];s.font="bold 10pt sans-serif";const l=new b({screen:[o.render.width,o.render.height]});console.log("___ viewport",l);let p;function T(){s.clearRect(0,0,o.render.width,o.render.height);const a=Date.now(),v=Math.floor(Date.now()*.001);v!==c?(c=v,y=n,n=1):n++,h.update(d,w,u,a),l.update(d,w,h.position[0]+h.dimensions[0]/2,h.position[1]+h.dimensions[1]/2),s.fillStyle="#000000",s.fillRect(0,0,l.screen[0],l.screen[1]),l.draw(s,d,w,u),h.draw(s,l.offset),s.fillStyle="#ff0000",s.fillText(`FPS: ${y}`,10,20),p=requestAnimationFrame(T)}e.register(()=>{p&&cancelAnimationFrame(p)}),T()}});export{I as default};
