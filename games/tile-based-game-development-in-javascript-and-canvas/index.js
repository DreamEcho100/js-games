import D from"../../libs/core/dom.js";import{adjustCanvas as T}from"../../libs/dom/index.js";import"../../libs/class-names.js";import"../../libs/cleanup.js";import"../../libs/math.js";const j=await D({cb:({appId:M,cleanupManager:d,createLayout:g})=>{const y=`${M}-canvas`,h={render:{width:400,height:400},dom:{}};g(`<small class='block text-center'><em>In Progress</em></small><canvas
				id="${y}"
				width="${h.render.width}"
				height="${h.render.height}"
				class="border border-solid border-gray-300 dark:border-gray-700 mx-auto max-w-full w-5xl"
			></canvas>`);const m=document.getElementById(y);if(!m)throw new Error("Couldn't find the canvas!");const s=m.getContext("2d");if(!s)throw new Error("Couldn't get the canvas context!");const b=T({canvas:m,ctx:s,onUpdateCanvasSize:r=>{h.dom=r}});d.register(b);let u=0,f=0,v=0;const i={w:40,h:40},n={w:10,h:10};class C{constructor(e){this.tileFrom=[1,1],this.tileTo=[1,1],this.position=[45,45],this.dimensions=[i.w*.75,i.h*.75],this.timeMoved=0,this.delayMove=300,this.directionKeyMap={up:"ArrowUp",right:"ArrowRight",down:"ArrowDown",left:"ArrowLeft"},this.KeysCollection=Object.values(this.directionKeyMap),this.keyDirectionMap=Object.fromEntries(Object.entries(this.directionKeyMap).map(t=>[t[1],[t[0],!1]])),e.registerEvents({keydownCb:t=>{t.key in this.keyDirectionMap&&(this.keyDirectionMap[t.key][1]=!0)},keyupCb:t=>{t.key in this.keyDirectionMap&&(this.keyDirectionMap[t.key][1]=!1)}})}placeAt(e,t){this.tileFrom=[e,t],this.tileTo=[e,t],this.position=[e*i.w+(i.w-this.dimensions[0])*.5,t*i.h+(i.h-this.dimensions[1])*.5]}processMovement(e){if(this.tileFrom[0]===this.tileTo[0]&&this.tileFrom[1]===this.tileTo[1])return!1;const t=e-this.timeMoved;if(t>=this.delayMove)this.placeAt(this.tileTo[0],this.tileTo[1]);else{const o=t/this.delayMove;if(this.tileTo[0]!==this.tileFrom[0]){const l=(this.tileTo[0]-this.tileFrom[0])*o;this.position[0]=(this.tileFrom[0]+l)*i.w+(i.w-this.dimensions[0])*.5}if(this.tileTo[1]!==this.tileFrom[1]){const l=(this.tileTo[1]-this.tileFrom[1])*o;this.position[1]=(this.tileFrom[1]+l)*i.h+(i.h-this.dimensions[1])*.5}}return!0}toMapIndex(e,t){return t*n.w+e}update(e){if(!this.processMovement(e))for(const o of this.KeysCollection){const[w,l]=this.keyDirectionMap[o];if(!l)continue;let c=!1;switch(w){case"up":this.tileFrom[1]>0&&a[this.toMapIndex(this.tileFrom[0],this.tileFrom[1]-1)]==1&&(this.tileTo[1]-=1,c=!0);break;case"down":this.tileFrom[1]<n.h-1&&a[this.toMapIndex(this.tileFrom[0],this.tileFrom[1]+1)]==1&&(this.tileTo[1]+=1,c=!0);break;case"left":this.tileFrom[0]>0&&a[this.toMapIndex(this.tileFrom[0]-1,this.tileFrom[1])]==1&&(this.tileTo[0]-=1,c=!0);break;case"right":this.tileFrom[0]<n.w-1&&a[this.toMapIndex(this.tileFrom[0]+1,this.tileFrom[1])]==1&&(this.tileTo[0]+=1,c=!0);break}if(c){this.timeMoved=e;break}}}draw(){s.fillStyle="#0000ff",s.fillRect(this.position[0],this.position[1],this.dimensions[0],this.dimensions[1])}}const k=new C({registerEvents:r=>{d.registerWindowEventListener({type:"keyup",listener:r.keyupCb}),d.registerWindowEventListener({type:"keydown",listener:r.keydownCb})}}),a=[0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,0,0,1,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,1,0,1,0,0,1,1,1,0,0,1,0,1,0,1,0,0,1,0,0,1,1,1,1,1,1,1,1,0,0,1,0,0,0,0,1,1,0,0,0,1,1,1,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0];s.font="bold 10pt sans-serif";let p;function F(){s.clearRect(0,0,h.render.width,h.render.height);const r=Date.now(),e=Math.floor(Date.now()*.001);e!==u?(u=e,v=f,f=1):f++;for(let t=0;t<n.h;t++)for(let o=0;o<n.w;o++){switch(a[t*n.w+o]){case 0:s.fillStyle="#999999";break;default:s.fillStyle="#eeeeee";break}s.fillRect(o*i.w,t*i.h,i.w,i.h)}k.update(r),k.draw(),s.fillStyle="#ff0000",s.fillText(`FPS: ${v}`,10,20),p=requestAnimationFrame(F)}d.register(()=>{p&&cancelAnimationFrame(p)}),F()}});export{j as default};
