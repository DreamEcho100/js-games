import k from"../../libs/core/dom.js";import{adjustCanvas as C}from"../../libs/dom.js";import{scale2dSizeToFit as P}from"../../libs/math.js";import{generateSpriteAnimationStates as y}from"../../libs/sprite.js";import{resolveBaseImportUrl as s}from"../../libs/urls.js";import"../../libs/class-names.js";import"../../libs/cleanup.js";const B=await k({assetsInfo:[{type:"image",src:import.meta.resolve("./assets/images/raven.png",new URL(import.meta.url))},{type:"image",src:s("#games/collision-animations-from-a-sprite-sheet/assets/images/boom.png")},{type:"audio",src:s("#assets/audios/Magic SFX Preview Pack/Fire impact 1.wav")},{type:"audio",src:s("#assets/audios/Magic SFX Preview Pack/Healing Full.wav")},{type:"audio",src:s("#assets/audios/Magic SFX Preview Pack/Ice attack 2.wav")},{type:"audio",src:s("#assets/audios/Magic SFX Preview Pack/Misc 02.wav")},{type:"audio",src:s("#assets/audios/Magic SFX Preview Pack/Wind effects 5.wav")}],stylesheetLink:import.meta.resolve("./assets/styles/index.css",new URL(import.meta.url)),cb:({appId:x,assets:M,cleanUpManager:g,createLayout:S})=>{const l=`${x}-canvas`,[n,w,...f]=M,h={framesX:6,width:n.naturalWidth/6,height:n.naturalHeight},F=y([{name:"default",frames:h.framesX}],{width:h.width,height:h.height}),d={framesX:5,width:w.naturalWidth/5,height:w.naturalHeight};y([{name:"default",frames:d.framesX}],{width:d.width,height:d.height});const e={render:{width:500,height:700},dom:{}};S(`<small class='block text-center'><em>In Progress</em></small><canvas
			id="${l}"
			width="${e.render.width}"
			height="${e.render.height}"
			class="border border-solid border-gray-300 dark:border-gray-700 mx-auto max-w-full w-5xl"
		></canvas>`);const o=document.getElementById(l);if(!o)throw new Error("Couldn't find the canvas!");const r=o.getContext("2d");if(!r)throw new Error("Couldn't get the canvas context!");const I=C({canvas:o,ctx:r,onUpdateCanvasSize:i=>{e.dom=i,e.render.width=i.width,e.render.height=i.height}});g.register(I);let u=0;class X{constructor(t){const a=P({containerWidth:t.sprite.renderBaseWidth,containerHeight:t.sprite.renderBaseHeight,sourceWidth:t.sprite.width,sourceHeight:t.sprite.height});this.sprite={animationStates:t.sprite.animationStates,currentAnimationState:t.sprite.currentAnimationState,img:t.sprite.img,currentFrameX:0,currentFrameY:0,width:t.sprite.width,height:t.sprite.height},this.width=a.width,this.height=a.height,this.x=t.x,this.y=t.y,this.frameInterval=0,this.dx=0,this.dy=0,this.reCalc(),this.state="not-in-screen"}reCalc(){this.frameInterval=Math.floor(Math.random()*5+2.5),this.dx=Math.random()*1.24+(8-this.frameInterval)*.5,this.dy=Math.random()*1.24+(8-this.frameInterval)*.5}draw(){r.fillStyle="black",r.strokeRect(this.x,this.y,this.width,this.height),r.drawImage(this.sprite.img,this.sprite.currentFrameX*this.sprite.width,this.sprite.currentFrameY*this.sprite.height,this.sprite.width,this.sprite.height,this.x,this.y,this.width,this.height)}update(){if(this.x-=this.dx,this.y+=this.dy,this.state==="in-screen"&&(this.y<this.height*.25||this.y>e.render.height*.75)&&(this.dy=-this.dy),this.x+this.width<0||this.y+this.height<0||this.y>e.render.height)this.state==="in-screen"?(this.x=e.render.width+e.render.width*Math.floor(Math.random()*5)+this.width*Math.floor(Math.random()*5),this.y=e.render.height*.25+Math.random()*e.render.height*.4,this.reCalc()):this.state="not-in-screen";else{this.state==="not-in-screen"&&(this.state="in-screen");const a=this.sprite.animationStates[this.sprite.currentAnimationState];u%this.frameInterval===0&&(this.sprite.currentFrameX=this.sprite.currentFrameX>=a.size-1?0:this.sprite.currentFrameX+1)}}}const v=10;let m=new Array(v);for(let i=0;i<v;i++){const t=i>0?m[i-1]:null,a=new X({x:(t?.x?(t.x+e.render.width)*Math.random()+t.width:0)+e.render.width*1.5+Math.random()*e.render.width+10+(t?t.width*(Math.random()*6):0),y:e.render.height*.25+Math.random()*e.render.height*.4,sprite:{img:n,animationStates:F,currentAnimationState:"default",renderBaseWidth:80,width:h.width,height:h.height},sfx:f[Math.floor(Math.random()*f.length)]});a.y>e.render.height*.5?a.dy=-1*Math.random()*2-.5:a.dy=Math.random()*2-.5,m[i]=a}let c;function p(i){r.clearRect(0,0,e.render.width,e.render.height);for(const t of m)t.update(),t.draw();u++,c=requestAnimationFrame(p)}g.register(()=>{c&&cancelAnimationFrame(c)}),p()}});export{B as default};
