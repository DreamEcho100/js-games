import{clamp as E}from"../../libs/math.js";import R from"../../libs/core/dom.js";import{adjustCanvas as U}from"../../libs/dom.js";import"../../libs/class-names.js";import"../../libs/cleanup.js";const q=await R({assetsInfo:[{type:"image",src:import.meta.resolve("./backgroundLayers/layer-1.png",new URL(import.meta.url))},{type:"image",src:import.meta.resolve("./backgroundLayers/layer-2.png",new URL(import.meta.url))},{type:"image",src:import.meta.resolve("./backgroundLayers/layer-3.png",new URL(import.meta.url))},{type:"image",src:import.meta.resolve("./backgroundLayers/layer-4.png",new URL(import.meta.url))},{type:"image",src:import.meta.resolve("./backgroundLayers/layer-5.png",new URL(import.meta.url))}],cb:({appId:n,assets:w,cleanupManager:o,createLayout:y})=>{const c=`${n}-canvas`,h=1,l=20;let r=5;const p=`${n}-show-game-speed`,g=`${n}-game-speed`,t={render:{width:800,height:700},dom:{}};y(`<canvas
				id="${c}"
				width="${t.render.width}"
				height="${t.render.height}"
				class="border border-solid border-gray-300 dark:border-gray-700 mx-auto max-w-full w-5xl"
			></canvas>
			<div class="flex flex-col gap-4">
				<label>Game speed: <span id="${p}">${r}</span></label>
				<input type="range" id="${g}" min="${h}" max="${l}" value="${r}" />
			</div>`);const v=document.getElementById(p),f=document.getElementById(g);o.registerEventListener({elem:f,type:"input",listener:e=>{r=E(Number(e.target.value),h,l),v.innerText=r.toString()}});const d=document.getElementById(c);if(!d)throw new Error("Couldn't find the canvas!");const a=d.getContext("2d");if(!a)throw new Error("Couldn't get the canvas context!");const x=U({canvas:d,ctx:a,onUpdateCanvasSize:e=>{t.dom=e,t.render.width=e.width,t.render.height=e.height}});o.register(x);const[L,b,I,$,S]=w;class i{constructor(s,k){this.x1=0,this.y=0,this.width=s.naturalWidth,this.height=s.naturalHeight,this.img=s,this.speedModifier=k,this.speed=r*this.speedModifier}update(){this.speed=r*this.speedModifier,this.x1<=-this.width&&(this.x1=0),this.x1=Math.floor(this.x1-this.speed)}draw(){a.drawImage(this.img,this.x1,0),a.drawImage(this.img,this.x1+this.width,0)}}const C=[new i(L,.2),new i(b,.4),new i(I,.6),new i($,.8),new i(S,1)];let m;function u(){a.clearRect(0,0,t.render.width,t.render.height);for(const e of C)e.update(),e.draw();m=requestAnimationFrame(u)}o.register(()=>{m&&cancelAnimationFrame(m)}),u()}});export{q as default};
