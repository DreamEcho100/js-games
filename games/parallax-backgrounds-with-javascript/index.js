import{clamp as E}from"../../libs/math.js";import R from"../../libs/core/dom.js";import{adjustCanvas as B}from"../../libs/dom.js";import"../../libs/class-names.js";import"../../libs/cleanup.js";const F=await R({assetsInfo:[{type:"image",src:import.meta.resolve("./backgroundLayers/layer-1.png",new URL(import.meta.url))},{type:"image",src:import.meta.resolve("./backgroundLayers/layer-2.png",new URL(import.meta.url))},{type:"image",src:import.meta.resolve("./backgroundLayers/layer-3.png",new URL(import.meta.url))},{type:"image",src:import.meta.resolve("./backgroundLayers/layer-4.png",new URL(import.meta.url))},{type:"image",src:import.meta.resolve("./backgroundLayers/layer-5.png",new URL(import.meta.url))}],cb:({appId:s,assets:u,cleanUpManager:o,createLayout:y})=>{const w=`canvas-${s}`,c=1,l=20;let t=5;const p=`showGameSpeed-${s}`,g=`gameSpeed-${s}`;let a={width:800,height:700};y(`<canvas
				id="${w}"
				width="${a.width}"
				height="${a.height}"
				class="border-2 border-solid border-gray-300 dark:border-gray-700 max-w-full mx-auto"
			></canvas>
			<div class="flex flex-col gap-4">
				<label>Game speed: <span id="${p}">${t}</span></label>
				<input type="range" id="${g}" min="${c}" max="${l}" value="${t}" />
			</div>`);const v=document.getElementById(p),f=document.getElementById(g);o.registerEventListener({elem:f,type:"input",listener:e=>{t=E(Number(e.target.value),c,l),v.innerText=t.toString()}});const m=document.getElementById("vanillaJavascriptSpriteAnimationTechniques");if(!m)throw new Error("Couldn't find the canvas!");const r=m.getContext("2d");if(!r)throw new Error("Couldn't get the canvas context!");const x=B({canvas:m,ctx:r,onUpdateCanvasSize:e=>{a=e}});o.register(x);const[b,L,S,I,$]=u;class i{constructor(n,k){this.x1=0,this.y=0,this.width=n.naturalWidth,this.height=n.naturalHeight,this.img=n,this.speedModifier=k,this.speed=t*this.speedModifier}update(){this.speed=t*this.speedModifier,this.x1<=-this.width&&(this.x1=0),this.x1=Math.floor(this.x1-this.speed)}draw(){r.drawImage(this.img,this.x1,0),r.drawImage(this.img,this.x1+this.width,0)}}const C=[new i(b,.2),new i(L,.4),new i(S,.6),new i(I,.8),new i($,1)];let d;function h(){r.clearRect(0,0,a.width,a.height);for(const e of C)e.update(),e.draw();d=requestAnimationFrame(h)}o.register(()=>{d&&cancelAnimationFrame(d)}),h()}});export{F as default};
