import{clamp as E}from"../../libs/math.js";import R from"../../libs/core/dom.js";import"../../libs/class-names.js";import"../../libs/cleanup.js";import"../../libs/dom.js";const A=await R({assetsInfo:[{type:"image",src:import.meta.resolve("./backgroundLayers/layer-1.png",new URL(import.meta.url))},{type:"image",src:import.meta.resolve("./backgroundLayers/layer-2.png",new URL(import.meta.url))},{type:"image",src:import.meta.resolve("./backgroundLayers/layer-3.png",new URL(import.meta.url))},{type:"image",src:import.meta.resolve("./backgroundLayers/layer-4.png",new URL(import.meta.url))},{type:"image",src:import.meta.resolve("./backgroundLayers/layer-5.png",new URL(import.meta.url))}],cb:({appId:s,assets:y,cleanUpManager:m,createLayout:w})=>{const d=`canvas-${s}`,c=1,l=20;let e=5;const p=`showGameSpeed-${s}`,g=`gameSpeed-${s}`,r={width:800,height:700};w(`<canvas
				id="${d}"
				width="${r.width}"
				height="${r.height}"
				class="border-2 border-solid border-gray-300 dark:border-gray-700 max-w-full mx-auto"
			></canvas>
			<div class="flex flex-col gap-4">
				<label>Game speed: <span id="${p}">${e}</span></label>
				<input type="range" id="${g}" min="${c}" max="${l}" value="${e}" />
			</div>`);const v=document.getElementById(p),f=document.getElementById(g);m.registerEventListener({elem:f,type:"input",listener:a=>{e=E(Number(a.target.value),c,l),v.innerText=e.toString()}});const h=document.getElementById(d);if(!h)throw new Error("Couldn't find the canvas element!");const i=h.getContext("2d");if(!i)throw new Error("Couldn't get the canvas context!");const[b,x,L,I,S]=y;class t{constructor(n,k){this.x1=0,this.y=0,this.width=n.naturalWidth,this.height=n.naturalHeight,this.img=n,this.speedModifier=k,this.speed=e*this.speedModifier}update(){this.speed=e*this.speedModifier,this.x1<=-this.width&&(this.x1=0),this.x1=Math.floor(this.x1-this.speed)}draw(){i.drawImage(this.img,this.x1,0),i.drawImage(this.img,this.x1+this.width,0)}}const $=[new t(b,.2),new t(x,.4),new t(L,.6),new t(I,.8),new t(S,1)];let o;function u(){i.clearRect(0,0,r.width,r.height);for(const a of $)a.update(),a.draw();o=requestAnimationFrame(u)}m.register(()=>{o&&cancelAnimationFrame(o)}),u()}});export{A as default};
