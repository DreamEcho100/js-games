import{clamp as E}from"../../libs/math.js";import R from"../../libs/core/dom.js";import{adjustCanvas as U}from"../../libs/dom/index.js";import"../../libs/class-names.js";import"../../libs/cleanup.js";const M=await R({assetsInfo:[{type:"image",src:import.meta.resolve("./backgroundLayers/layer-1.png",new URL(import.meta.url))},{type:"image",src:import.meta.resolve("./backgroundLayers/layer-2.png",new URL(import.meta.url))},{type:"image",src:import.meta.resolve("./backgroundLayers/layer-3.png",new URL(import.meta.url))},{type:"image",src:import.meta.resolve("./backgroundLayers/layer-4.png",new URL(import.meta.url))},{type:"image",src:import.meta.resolve("./backgroundLayers/layer-5.png",new URL(import.meta.url))}],cb:async({appId:s,assets:y,cleanupManager:o,createLayout:w})=>{const c=`${s}-canvas`,l=1,p=20;let t=5;const g=`${s}-show-game-speed`,h=`${s}-game-speed`,a={render:{width:800,height:700},dom:{}};await w(`<canvas
				id="${c}"
				width="${a.render.width}"
				height="${a.render.height}"
				class="border border-solid border-gray-300 dark:border-gray-700 mx-auto max-w-full w-5xl"
			></canvas>
			<div class="flex flex-col gap-4">
				<label>Game speed: <span id="${g}">${t}</span></label>
				<input type="range" id="${h}" min="${l}" max="${p}" value="${t}" />
			</div>`);const v=document.getElementById(g),f=document.getElementById(h);o.registerEventListener({elem:f,type:"input",listener:e=>{t=E(Number(e.target.value),l,p),v.innerText=t.toString()}});const d=document.getElementById(c);if(!d)throw new Error("Couldn't find the canvas!");const r=d.getContext("2d");if(!r)throw new Error("Couldn't get the canvas context!");const x=U({canvas:d,ctx:r,onUpdateCanvasSize:e=>{a.dom=e}});o.register(x);const[b,L,I,$,S]=y;class i{constructor(n,k){this.x1=0,this.y=0,this.width=n.naturalWidth,this.height=n.naturalHeight,this.img=n,this.speedModifier=k,this.speed=t*this.speedModifier}update(){this.speed=t*this.speedModifier,this.x1<=-this.width&&(this.x1=0),this.x1=Math.floor(this.x1-this.speed)}draw(){r.drawImage(this.img,this.x1,0),r.drawImage(this.img,this.x1+this.width,0)}}const C=[new i(b,.2),new i(L,.4),new i(I,.6),new i($,.8),new i(S,1)];let m;function u(){r.clearRect(0,0,a.render.width,a.render.height);for(const e of C)e.update(),e.draw();m=requestAnimationFrame(u)}o.register(()=>{m&&cancelAnimationFrame(m)}),u()}});export{M as default};
